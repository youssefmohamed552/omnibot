cmake_minimum_required(VERSION 3.5)
project(camera)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

list(APPEND CMAKE_PREFIX_PATH "/opt/ros/foxy/")

# find dependencies
## find_package(ament_cmake REQUIRED)
## find_package(image_transport REQUIRED)
## find_package(rclcpp REQUIRED)
## find_package(cv_bridge REQUIRED)

find_package(ament_cmake REQUIRED)
find_package(cv_bridge REQUIRED)
find_package(camera_info_manager REQUIRED)
find_package(image_transport REQUIRED)
find_package(class_loader REQUIRED)
find_package(rclcpp REQUIRED)
find_package(image_geometry REQUIRED)
find_package(rclcpp_components REQUIRED)
# find_package(rclcpp_components REQUIRED)
# uncomment the following section in order to fill in
# further dependencies manually.
# find_package(<dependency> REQUIRED)

set( DEPENDENCIES 
  #  rclcpp
  #  rclcpp_components
  #  image_transport
  #  cv_bridge

  rclcpp
  rclcpp_components
  image_geometry
  class_loader
  image_transport
  camera_info_manager
  cv_bridge
)

find_package(OpenCV REQUIRED COMPONENTS core)
message(STATUS "opencv version ${OpenCV_VERSION}")

include_directories(include)

add_library(image_publisher SHARED src/camera/image_publisher.cpp)
target_link_libraries(image_publisher ${ament_LIBRARIES} ${OpenCV_LIBRARIES})
ament_target_dependencies(image_publisher ${DEPENDENCIES})

# rclcpp_components_register_nodes(image_publisher "camera::ImagePublisher")

add_executable(camera_node src/camera_node.cpp)
# target_include_directories(camera_node PUBLIC
  # $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  # $<INSTALL_INTERFACE:include>)

target_link_libraries(camera_node ${ament_LIBRARIES} image_publisher)
ament_target_dependencies(camera_node ${DEPENDENCIES})

install(TARGETS camera_node
  DESTINATION lib/${PROJECT_NAME})

install(TARGETS image_publisher
  DESTINATION lib/${PROJECT_NAME})

## install(TARGETS image_publisher
##   DESTINATION bin)


if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
